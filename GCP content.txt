cli command of GCP=======================================
1.gcloud compute instances create myvm01 --machine-type n2-standard-4 --zone us-central-a
--.for accessing machine via cli
2.gcloud compute ssh myvm01 --zone=us-central-a
3.gcloud compute image list
4.gcloud compute instances myvm02
5.gcloud compute instances stop myvm02
6.gcloud compute instances start myvm02
7.gcloud compute instances delet myvm02

8.gcloud compute instances stop  vm-name

use for resize machine type=======
9.gcloud compute instances set-machine-type vmname --machine-type e2-standard-2

use fo resize machine type cusomize way=======================
10.gcloud compute instances set-machine-type (existingvmname) --machine-type (newmachinename) e2-custom-4-2048 

for disk resize via cloudshell====
11. gcloud compute disks resize instance-1 --zone us-central1-c --size 40
=======================================================================================================================================
static website hosting on cloud storage-----------------
1. go to cloudshell
2. wget and url link for website download
3. ls
smaple-banner.zip
5.mkdir website
6. mv sample-banner website
7. cd website
8. unzip sample banner-website
9.gsuitl -m cp -r sample-website gs://madiha

==================================================================================================================================================

images creation via cloud shell----------
gcloud config set project azhar-cloud421

firstly disable auto delete disk

1. gcloud compute instances set-disk-auto-delete vm-name --no-auto-delete --disk=sourceDiskName
2. gcloud compute images create image-name --source-disk=source-disk --source-disk-zone=zone --storage-location=asia or us --force
3. gcloud compute images describe image-name
4. gcloud compute images delete images-name
===============================================================================================================================
machine-image creation via cli--------------------------
1.gcloud compute machine-images create machine-image-name --source-instance=source-vm-name --source-instance-zone=us-central-a
2.gcloud beta compute instances create vm-name --zone=zone-name --source-machine-image=machine-image-name --machine-type=e2-standard-2 
=====================================================================================================================================================
google cloud storage cloudshell commands=============================================================================================================
create a bucket------
2.gsutil cp your-file.txt gs://your-bucket-name/  ( Copying a File to a Bucket:)
3. gsutil cp gs://your-bucket-name/your-file.txt ./local-directory/  (downlaod the object from your  a Bucket Object Locally:)
4. gsutil ls   ( List bucket)
5. gsutil ls gs://your-bucket-name/     ( List Objects in a Bucket:)
6. gsutil rm gs://your-bucket-name/your-file.txt   (deleting a file in a bucket)
7. gsutil rb gs://your-bucket-name             (deleting a bucket)
8. gsutil rsync -r local-directory gs://your-bucket-name/    (synking a local file with bucket)
9. gsutil acl ch -u AllUsers:R gs://your-bucket-name/your-file.txt   (Access Control)
10. gsutil acl ch -d AllUsers gs://your-bucket-name/your-file.txt    rovoke all access from bucket)
11. gsutil -o 'GSUtil:default_storage_class=NEARLINE' cp your-file.txt gs://your-bucket-name/  ( Defining Storage Class:)




1. gsutil mb -b on -l us-central1 gs://azhar_cloud143   (gs://azhar_cloud124 defines bucket name)
upload the file on cloudshell to store in bucket object
2. cloudeshell->file->upload file
3.pwd
4. gsutil cp imagename.jpg gs://azhar_cloud123  (bucket name)
downlaod the object from your bucket 
5. gsutil cp gs://azhar_cloud143/'Screenshot (151).png' /home/azharism51/download.png
6. gsutil cp gs://azhar_cloud143/ file.name.png gs://azhar_cloud143/myfolder/file.name.png
7.gsutil ls -l gs://bucket-name/filename
8. gsutil iam ch allUsers:objectViewer gs://bucket-name     (giving public access)
vv.gsutil iam ch -d allUsers:objectViewer gs://bucket-name   (remove the public access)
9 gsutil rm gs://bucketname/filename      (delete an object or file)
10 gsutil rm -r gs://bucket-name           (delete a bucket)
====================================================================================================================================================
versioning of bucket----------------------------
1. gsutil versioning set off gs://bucket-name      (bucket versioning on or off)
2. gsutil versioning get gs://bucket-name          (to get the bcuket versioning info)
3. gsutil ls -a gs://bucket-name
4. gsutil cp gs://madiha/objetc.txt#1699041664252818 gs://madiha/objetc.txt    (versioning update )
5 gsutil rm gs://bucket-name version name  (delete an specific version)    

==============================================================================================================================
signed url creation steps and and command-------------
work as a root user-------
1.create a bucket and upload an obeject
2.go to api and sercvices create credentials for service account doesnt exist
3.create a key in json format
4.upload the json file key in cloud shell
5.dowlaod some libraries command below
6. pip install pyopenssl
7.gsutil gs://buckect-name
7 gsutil signurl -d 60s key.json gs://madiha/object-name 




=======================================================================================================================================================
VPC cli command+++++++++++++++++++
1.gcloud compute networks create auto-vpc --project=triple-cab-353707 --subnet-mode=auto --mtu=1460 --bgp-routing-mode=regional
2.gcloud compute networks create auto-vpc --project=triple-cab-353707 --subnet-mode=auto --mtu=1460 --bgp-routing-mode=regional
3.gcloud compute firewall-rules create auto-vpc-allow-rdp-2 --project=triple-cab-353707 --network=projects/triple-cab-353707/global/networks/auto-vpc --description=Allows\ RDP\ connections\ from\ any\ source\ to\ any\ instance\ on\ the\ network\ using\ port\ 3389. --direction=INGRESS --priority=65534 --source-ranges=0.0.0.0/0 --action=ALLOW --rules=tcp:3389
4.gcloud compute firewall-rules create auto-vpc-allow-ssh-2 --project=triple-cab-353707 --network=projects/triple-cab-353707/global/networks/auto-vpc --description=Allows\ TCP\ connections\ from\ any\ source\ to\ any\ instance\ on\ the\ network\ using\ port\ 22. --direction=INGRESS --priority=65534 --source-ranges=0.0.0.0/0 --action=ALLOW --rules=tcp:22
===============================================================================================================================================================
app engine commands=================================================

1.gcloud app deploy   (deploy the app)
2. gcloud app deploy app.yaml  ( Deploy with a Specific Configuration File)
3. gcloud app versions list   (List Deployed Versions)
4. gcloud app services set-traffic [SERVICE] --splits=[SPLIT]   ( Used to split traffic between different versions of a service)
5. gcloud app logs tail -s [SERVICE]  (Streams logs from the specified service)
6. gcloud app browse  (Opens the URL of your deployed app in the default web browser.)
7. gcloud app services list  (Lists all services in your app.)
8.ab -c 1000 -n 10000 (url)   for traffice generate randomly----
=============================================================================================================
1.upload nodejs foleder in cloudshell
2. node server.js
3. gcloud app deploy -v version-1
3. gcloud app describe
4.gcloud app instances list
5. watch gcloud app instances list
6. sudo apt install apache2-utils -y   (for traffice request generator on url)
7. ab -c 1000 -n 10000 (url)   for traffice generate randomly
================================================================
8. gcloud app deploy service2-version1   (used for second service deploy)
==========================================================================================
flex environement-----------------------
1.time gcloud app deploy -v flex1    (used for flex environment app deployment)
============================================================================================
cloud run command------------------------
1.gcloud builds submit -t gcr.io/$DEVSHELL_PROJECT_ID/cloudrun

2. gcloud run deploy azharcloud --image=gcr.io/manto-roxen/cloudrun:ver1 --allow-unauthenticated --platform managed --region us-central1



=========================================================================================================================================================

GKE----------------------------
1. gcloud container clusters create
==========================================================================================================================================================
1. ipify.org website for ip api check code

2. mysql -h 34.68.122.107 -u root -p
==============================================
cloudshell access ip----
#!/bin/bash

ip=$(curl -s https://api.ipify.org)
echo "My public IP address is: $ip"
================================================================================================================================================

SDK setup for google cloud======================================================================================================================
1. curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-437.0.1-linux-x86_64.tar.gz
2. tar -xf google-cloud-cli-437.0.1-linux-x86.tar.gz
3. ./google-cloud-sdk/install.sh
4. ./google-cloud-sdk/bin/gcloud init
5. export PATH="./google-cloud-sdk/bin/gcloud/bin:$PATH" to .bashrc
6. gcloud config set project <project-id>
gcloud config set compute/zone europe-west1-b
7. gcloud auth login
8. gcloud auth activate-service-account
====================================================================================================================
Chart Management--------------------------------------------------------
helm create <name>                      # Creates a chart directory along with the common files and directories used in a chart.
helm package <chart-path>               # Packages a chart into a versioned chart archive file.
helm lint <chart>                       # Run tests to examine a chart and identify possible issues:
helm show all <chart>                   # Inspect a chart and list its contents:
helm show values <chart>                # Displays the contents of the values.yaml file
helm pull <chart>                       # Download/pull chart 
helm pull <chart> --untar=true          # If set to true, will untar the chart after downloading it
helm pull <chart> --verify              # Verify the package before using it
helm pull <chart> --version <number>    # Default-latest is used, specify a version constraint for the chart version to use
helm dependency list <chart>            # Display a list of a chart’s dependencies
==============================================================================================================================

helm install <name> <chart>                           # Install the chart with a name
helm install <name> <chart> --namespace <namespace>   # Install the chart in a specific namespace
helm install <name> <chart> --set key1=val1,key2=val2 # Set values on the command line (can specify multiple or separate values with commas)
helm install <name> <chart> --values <yaml-file/url>  # Install the chart with your specified values
helm install <name> <chart> --dry-run --debug         # Run a test installation to validate chart (p)
helm install <name> <chart> --verify                  # Verify the package before using it 
helm install <name> <chart> --dependency-update       # update dependencies if they are missing before installing the chart
helm uninstall <name>                                 # Uninstall a release
=====================================================================================================================
helm upgrade <release> <chart>                            # Upgrade a release
helm upgrade <release> <chart> --atomic                   # If set, upgrade process rolls back changes made in case of failed upgrade.
helm upgrade <release> <chart> --dependency-update        # update dependencies if they are missing before installing the chart
helm upgrade <release> <chart> --version <version_number> # specify a version constraint for the chart version to use
helm upgrade <release> <chart> --values                   # specify values in a YAML file or a URL (can specify multiple)
helm upgrade <release> <chart> --set key1=val1,key2=val2  # Set values on the command line (can specify multiple or separate valuese)
helm upgrade <release> <chart> --force                    # Force resource updates through a replacement strategy
helm rollback <release> <revision>                        # Roll back a release to a specific revision
helm rollback <release> <revision>  --cleanup-on-fail     # Allow deletion of new resources created in this rollback when rollback fails
====================================================================================================================================================
helm repo add <repo-name> <url>   # Add a repository from the internet:
helm repo list                    # List added chart repositories
helm repo update                  # Update information of available charts locally from chart repositories
helm repo remove <repo_name>      # Remove one or more chart repositories
helm repo index <DIR>             # Read the current directory and generate an index file based on the charts found.
helm repo index <DIR> --merge     # Merge the generated index with an existing index file
helm search repo <keyword>        # Search repositories for a keyword in charts
helm search hub <keyword>         # Search for charts in the Artifact Hub or your own hub instance
=======================================================================================================================================
helm list                       # Lists all of the releases for a specified namespace, uses current namespace context if namespace not specified
helm list --all                 # Show all releases without any filter applied, can use -a
helm list --all-namespaces      # List releases across all namespaces, we can use -A
helm -l key1=value1,key2=value2 # Selector (label query) to filter on, supports '=', '==', and '!='
helm list --date                # Sort by release date
helm list --deployed            # Show deployed releases. If no other is specified, this will be automatically enabled
helm list --pending             # Show pending releases
helm list --failed              # Show failed releases
helm list --uninstalled         # Show uninstalled releases (if 'helm uninstall --keep-history' was used)
helm list --superseded          # Show superseded releases
helm list -o yaml               # Prints the output in the specified format. Allowed values: table, json, yaml (default table)
helm status <release>           # This command shows the status of a named release.
helm status <release> --revision <number>   # if set, display the status of the named release with revision
helm history <release>          # Historical revisions for a given release.
helm env                        # Env prints out all the environment information in use by Helm.
===============================================================================================================================
Download Release Information-----------------------------------
helm get all <release>      # A human readable collection of information about the notes, hooks, supplied values, and generated manifest file of the given release.
helm get hooks <release>    # This command downloads hooks for a given release. Hooks are formatted in YAML and separated by the YAML '---\n' separator.
helm get manifest <release> # A manifest is a YAML-encoded representation of the Kubernetes resources that were generated from this release's chart(s). If a chart is dependent on other charts, those resources will also be included in the manifest.
helm get notes <release>    # Shows notes provided by the chart of a named release.
helm get values <release>   # Downloads a values file for a given release. use -o to format output
=====================================================================================================================
Plugin Management------------------------------------
helm plugin install <path/url1>     # Install plugins
helm plugin list                    # View a list of all installed plugins
helm plugin update <plugin>         # Update plugins
helm plugin uninstall <plugin>      # Uninstall a plugin
==========================================================================================================================
project-1
Create a repository using GCP Cloud Source Repository==============================
1. gcloud services enable sourcerepo.googleapis.com
2. gcloud source repos create web-html-app
3. git clone https://source.developers.google.com/p/project111-id/r/web-html-app
cd web-app
4. vimindex.html
<html>
<title>GCP Demo Site</title>
<head>
</head>
<body>
<h1>GCP Demo Site</h1>
<div>Application Demo</div>
</body>
</html>

5. git config --global user.email "azharism.007@gmail.com"
6. git config --global user.name "azhar"
7. git add .
8. git commit -m "add code"
9.git push origin master
=============================================================================================
project----2
Monitor Google Compute Engine for High CPU usage----
Steps

Create GCE and install Apache on it
Create High CPU usage dashboard using json file
Create Email notification channel
Create Alert Policy using json file
Install stress on GCE and increase load
View Dashboard and Alert

1. gcloud compute instances create  webserver --machine-type n1-standard-1 --image-family debian-11--image-project debian-cloud --zone europe-west1-b
2. gcloud compute instances list
3. inside the server
4.sudo apt update
5. sudo apt install apache2 -y
6. sudo systemctl enable apache2
7.sudo systemctl status apache2
8. vim gcehighcpu-dashboard.json
{
  "dashboardFilters": [],
  "displayName": "GCEHighCPUDashBoard",
  "labels": {},
  "mosaicLayout": {
    "columns": 12,
    "tiles": [
      {
        "height": 4,
        "widget": {
          "title": "VM Instance - CPU utilization [MEAN]",
          "xyChart": {
            "chartOptions": {
              "mode": "COLOR"
            },
            "dataSets": [
              {
                "breakdowns": [],
                "dimensions": [],
                "measures": [],
                "minAlignmentPeriod": "60s",
                "plotType": "LINE",
                "targetAxis": "Y1",
                "timeSeriesQuery": {
                  "timeSeriesFilter": {
                    "aggregation": {
                      "alignmentPeriod": "60s",
                      "crossSeriesReducer": "REDUCE_MEAN",
                      "groupByFields": [
                        "metric.label.\"instance_name\""
                      ],
                      "perSeriesAligner": "ALIGN_MEAN"
                    },
                    "filter": "metric.type=\"compute.googleapis.com/instance/cpu/utilization\" resource.type=\"gce_instance\""
                  }
                }
              }
            ],
            "thresholds": [],
            "yAxis": {
              "label": "",
              "scale": "LINEAR"
            }
          }
        },
        "width": 6
      }
    ]
  }
}

9. gcloud monitoring dashboards create --config-from-file=gcehighcpu-dashboard.json

10. gcloud monitoring dashboards list
==Create Email notification channel==
11. gcloud alpha monitoring channels create --display-name="azhar" --description="Email Alert" --type=email --channel-labels=email_address=pazharism51@gmail.com
12. gcloud alpha monitoring channels list

Add this notification channel id — 5004210260999533982 in alert policy json file as shown below==============================================
1. vim gcehighcpu-alert.json 







